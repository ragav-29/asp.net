trigger:
- none

pool:
  name: 'my agent'  # Your self-hosted agent

variables:
  group: 'my variable'  # the variable group is referenced here
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  solution: '*.sln'
  project: '**/*.csproj'

  # Replace these variables to my suitedname
  projectName: 'Shoppingcart'
  websiteName: 'Shoppingcart'

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
    - job:
      steps:  
        - task: DotNetCoreCLI@2
          displayName: 'dotnet restore'
          inputs:
            command: 'restore'
            projects: '*.sln'

        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            command: 'build'
            projects: '*.sln'
            arguments: --configuration Release

        - task: DotNetCoreCLI@2
          displayName: Test
          inputs:
            command: test
            projects: '*.sln'
            arguments: '--configuration $(BuildConfiguration)'

        - task: CopyFiles@2
          displayName: Copy files to $(Build.ArtifactStagingDirectory)
          inputs:
            SourceFolder: $(System.DefaultWorkingDirectory)
            Contents: "**/*.sql"
            TargetFolder: $(Build.ArtifactStagingDirectory)
          condition: succeededOrFailed()

        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
            command: 'publish'
            projects: '**/*.csproj'
            publishWebProjects: false
            arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            zipAfterPublish: true

        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: drop

- stage: 'Dev'
  displayName: 'Dev'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
    - deployment: Dev
      displayName: Dev
      environment: 
        name: 'AzureVM'
        resourceType: VirtualMachine
      variables:
        - name: websitePhysicalPath
          value: '%SystemDrive%\$(websiteName)'

      strategy:
        runOnce:
          deploy:
            steps: 
            # IIS Management Task (always runs)
            - task: IISWebAppManagementOnMachineGroup@0
              inputs:            
                IISDeploymentType: 'IISWebsite'
                ActionIISWebsite: 'CreateOrUpdateWebsite'
                WebsiteName: '$(websiteName)'
                WebsitePhysicalPath: '$(websitePhysicalPath)'
                WebsitePhysicalPathAuth: 'WebsiteUserPassThrough'

            # Check for .sql files existence and only run SQL deployment if found
            - task: PowerShell@2
              displayName: 'Check for .sql files'
              inputs:
                targetType: 'inline'
                script: |
                  $sqlFiles = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse -Filter "*.sql"
                  if ($sqlFiles.Count -gt 0) {
                    Write-Host "SQL files found, setting variable sqlFilesExist to true."
                    echo "##vso[task.setvariable variable=sqlFilesExist]true"
                  } else {
                    Write-Host "No SQL files found."
                    echo "##vso[task.setvariable variable=sqlFilesExist]false"
                  }

            # Only run SQL deployment if .sql files exist
            - task: SqlDacpacDeploymentOnMachineGroup@0
              condition: and(succeeded(), eq(variables['sqlFilesExist'], 'true'))
              inputs:
                TaskType: 'sqlQuery'
                SqlFile: '**/*.sql'
                ServerName: 'azureVM'
                DatabaseName: 'Test'
                AuthScheme: 'sqlServerAuthentication'
                SqlUsername: 'sa'
                SqlPassword: $(dbpassword)  # Referenced as a secret variable, securely handled by Azure DevOps

            # IIS WebApp Deployment (always runs)
            - task: IISWebAppDeploymentOnMachineGroup@0
              inputs:
                WebSiteName: '$(websiteName)'
                Package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/$(projectName).zip'

            - task: SqlDacpacDeploymentOnMachineGroup@0
              condition: and(succeeded(), eq(variables['sqlFilesExist'], 'true'))
              inputs:
                TaskType: 'sqlQuery'
                SqlFile: '**/*.sql'
                ServerName: 'azureVM'
                DatabaseName: 'Test'
                AuthScheme: 'sqlServerAuthentication'
                SqlUsername: 'sa'
                SqlPassword: $(dbpassword)  # Referenced as a secret variable
